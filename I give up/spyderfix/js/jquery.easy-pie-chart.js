// Generated by CoffeeScript 1.3.3

/*
Easy pie chart is a jquery plugin to display simple animated pie charts for only one value

Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.

Built on top of the jQuery library (http://jquery.com)

@source: http://github.com/rendro/easy-pie-chart/
@autor: Robert Fleischmann
@version: 1.0.1

Inspired by: http://dribbble.com/shots/631074-Simple-Pie-Charts-II?list=popular&offset=210
Thanks to Philip Thrasher for the jquery plugin boilerplate for coffee script
*/


(function() {

  (function($) {
    $.largeChart = function(el, options) {
      var addScaleLine, animateLine, drawLine, easeInOutQuad, renderBackground, renderScale, renderTrack,
        _this = this;
      this.el = el;
      this.$el = $(el);
      this.$el.data("largeChart", this);
      this.init = function() {
        var percent;
        _this.options = $.extend({}, $.largeChart.defaultOptions, options);
        /***percent = parseInt(_this.$el.data('percent'), 10);*/
		/**/ percent = parseInt(_this.$el.find('.score').text(), 10);
        _this.percentage = 0;
        if (_this.options.tronStyle == true) {
			_this.canvas = $("<canvas width='" + (_this.options.size + 14) + "' height='" + (_this.options.size + 14) + "'></canvas>").get(0);
		} else {
			_this.canvas = $("<canvas width='" + (_this.options.size) + "' height='" + (_this.options.size) + "'></canvas>").get(0);
		}
		_this.canvas = $("<canvas width='" + (_this.options.size + 14) + "' height='" + (_this.options.size + 14) + "'></canvas>").get(0);
        _this.$el.append(_this.canvas);
        if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
          G_vmlCanvasManager.initElement(_this.canvas);
        }
        _this.ctx = _this.canvas.getContext('2d');
		if (_this.options.tronStyle == true) {
			_this.ctx.translate(((_this.options.size / 2) + 7 ), ((_this.options.size / 2) + 7 ));
		} else {
			_this.ctx.translate(_this.options.size / 2, _this.options.size / 2);
		}
        _this.$el.addClass('largeChart');
        if (_this.options.tronStyle == true) {
			_this.$el.css({			  
			  width: (_this.options.size +14),
			  height: (_this.options.size + 14),
			  //lineHeight: "" + _this.options.size + "px"
			});
		} else {
			_this.$el.css({			  
			  width: _this.options.size,
			  height: _this.options.size,
			  lineHeight: "" + _this.options.size + "px"
			});
		}
		
        _this.update(percent);
        return _this;
      };
      this.update = function(percent) {
        if (_this.options.animate === false) {
          return drawLine(percent);
        } else {
          return animateLine(_this.percentage, percent);
        }
      };
      renderScale = function() {
        var i, _i, _results;
        _this.ctx.fillStyle = _this.options.scaleColor;
        _this.ctx.lineWidth = 1;
        _results = [];
        for (i = _i = 0; _i <= 24; i = ++_i) {
          _results.push(addScaleLine(i));
        }
        return _results;
      };
      addScaleLine = function(i) {
        var offset;
        offset = i % 6 === 0 ? 0 : _this.options.size * 0.017;
        _this.ctx.save();
        _this.ctx.rotate(i * Math.PI / 12);
        _this.ctx.fillRect(_this.options.size / 2 - offset, 0, -_this.options.size * 0.05 + offset, 1);
        return _this.ctx.restore();
      };
      renderTrack = function() {
	  	    // Tron Styling
		function outerGlow() {
		  _this.ctx.beginPath();
		  _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
		  _this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
		  _this.ctx.shadowBlur = 2;
		  _this.ctx.shadowColor = /*'rgba(40,140,190,1.5)'*/ '#a3a3a3';
		  _this.ctx.stroke();
		  _this.ctx.closePath();
		  var n = 2;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
			_this.ctx.shadowBlur = 5;
			_this.ctx.shadowColor = '#707070';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		function outerShadow() {
		  var n = 2;
		  for (var i = 0; i < n; i++) {
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
			_this.ctx.shadowBlur = 3;
			_this.ctx.shadowColor = /*'rgba(40,140,180,.5)' 'rgba(0,0,0,.6)'*/ 'rgba(50,50,50,.7)';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}		
		function innerGlow() {
		  var n = 5;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.strokeStyle = '#919191';
			_this.ctx.lineWidth = 8;
			_this.ctx.shadowBlur = 5;
			_this.ctx.shadowColor = '#ababab';
			_this.ctx.closePath();
		  }
		}
		// Tron End
	  
        var offset;
        offset = _this.options.size / 2 - _this.options.lineWidth / 2;
        if (_this.options.scaleColor !== false) {
          offset -= _this.options.size * 0.08;
        }
        _this.ctx.beginPath();
        _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
        _this.ctx.strokeStyle = _this.options.trackColor;
		_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
		_this.ctx.closePath();

		if (_this.options.tronStyle == true) {
			outerGlow();
			outerShadow(); 
			innerGlow();
		}
		
        return _this.ctx.stroke();
      };
      renderBackground = function() {
        if (_this.options.scaleColor !== false) {
          renderScale();
        }
        if (_this.options.trackColor !== false) {
          return renderTrack();
        }
      };
	  
      drawLine = function(percent) {
	    // Tron Styling
		function outerGlow() {
		  _this.ctx.beginPath();
		  _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
		  _this.ctx.lineWidth = _this.options.lineWidth;
		  _this.ctx.shadowBlur = 4;
		  _this.ctx.shadowColor = /*'rgba(40,140,190,1.5)'*/ '#207fa3';
		  _this.ctx.stroke();
		  _this.ctx.closePath();
		  var n = 2;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.lineWidth = _this.options.lineWidth;
			_this.ctx.shadowBlur = 7;
			_this.ctx.shadowColor = '#55bef2';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		function outerShadow() {
		  var n = 2;
		  for (var i = 0; i < n; i++) {
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.lineWidth = _this.options.lineWidth;
			_this.ctx.shadowBlur = 1.5;
			_this.ctx.shadowColor = /*'rgba(40,140,180,.5)' 'rgba(0,0,0,.6)'*/ 'rgba(18,49,64,.7)';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}		
		function innerGlow() {
		  var n = 10;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.strokeStyle = '#64bfed';
			_this.ctx.lineWidth = 3;
			_this.ctx.shadowBlur = 6;
			_this.ctx.shadowColor = '#64bfed';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		// Tron End
        var offset;
        renderBackground();
        _this.ctx.strokeStyle = $.isFunction(_this.options.barColor) ? _this.options.barColor(percent) : _this.options.barColor;
        _this.ctx.lineCap = _this.options.lineCap;
        offset = _this.options.size / 2 - _this.options.lineWidth / 2;
        if (_this.options.scaleColor !== false) {
          offset -= _this.options.size * 0.08;
        }
        _this.ctx.save();
        _this.ctx.rotate(-Math.PI / 2);
        _this.ctx.beginPath();
        _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
		_this.ctx.lineWidth = _this.options.lineWidth;
		if (_this.options.tronStyle == true) {
			//var gradient=_this.ctx.createRadialGradient(0, 0, 400, 0, 0, 25, 0, 0, 10);
			//gradient.addColorStop(0, 'rgba(0,255,0,.5)');
			//gradient.addColorStop(1, 'rgba(255,0,0,.5)');
			_this.ctx.strokeStyle = '#4db4e4';
			_this.ctx.shadowBlur = 4;
			_this.ctx.shadowColor = '#207fa3';
			_this.ctx.stroke();
			_this.ctx.closePath();
			outerGlow();
			outerShadow();
			innerGlow();
        } else {
			_this.ctx.stroke();
			_this.ctx.closePath();
		}
		
		
        return _this.ctx.restore();
      };
      animateLine = function(from, to) {
        var currentStep, fps, steps;
        fps = 30;
        steps = fps * _this.options.animate / 1000;
        currentStep = 0;
        _this.options.onStart.call(_this);
        _this.percentage = to;
        if (_this.animation) {
          clearInterval(_this.animation);
          _this.animation = false;
        }
        return _this.animation = setInterval(function() {
          _this.ctx.clearRect(-_this.options.size / 2, -_this.options.size / 2, _this.options.size, _this.options.size);
          renderBackground.call(_this);
          drawLine.call(_this, [easeInOutQuad(currentStep, from, to - from, steps)]);
          currentStep++;
          if ((currentStep / steps) > 1) {
            clearInterval(_this.animation);
            _this.animation = false;
            return _this.options.onStop.call(_this);
          }
        }, 1000 / fps);
      };
      easeInOutQuad = function(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t + b;
        } else {
          return -c / 2 * ((--t) * (t - 2) - 1) + b;
        }
      };
      return this.init();
    };
    $.largeChart.defaultOptions = {
      barColor: '#ef1e25', 
      onStart: $.noop,
      onStop: $.noop,
	  trackColor: '#7a7a7a',
	  scaleColor: false,
	  lineCap: 'butt',
	  size: 300,
	  lineWidth: 18,
	  tronStyle: true,
	  animate: false,
	  trackOffset: 4
    };
    $.fn.largeChart = function(options) {
      return $.each(this, function(i, el) {
        var $el;
        $el = $(el);
        if (!$el.data('largeChart')) {
          return $el.data('largeChart', new $.largeChart(el, options));
        }
      });
    };
    return void 0;
  })(jQuery);

  /* END of Large Charts */
  
  
  /* BEGIN Mini Charts */
  
    (function($) {
    $.miniChart = function(el, options) {
      var addScaleLine, animateLine, drawLine, easeInOutQuad, renderBackground, renderScale, renderTrack,
        _this = this;
      this.el = el;
      this.$el = $(el);
      this.$el.data("miniChart", this);
      this.init = function() {
        var percent;
        _this.options = $.extend({}, $.miniChart.defaultOptions, options);
        /***percent = parseInt(_this.$el.data('percent'), 10);*/
		/**/ percent = parseInt(_this.$el.find('.score').text(), 10);
        _this.percentage = 0;
        if (_this.options.tronStyle == true) {
			_this.canvas = $("<canvas width='" + (_this.options.size + 14) + "' height='" + (_this.options.size + 14) + "'></canvas>").get(0);
		} else {
			_this.canvas = $("<canvas width='" + (_this.options.size) + "' height='" + (_this.options.size) + "'></canvas>").get(0);
		}
		_this.canvas = $("<canvas width='" + (_this.options.size + 14) + "' height='" + (_this.options.size + 14) + "'></canvas>").get(0);
        _this.$el.append(_this.canvas);
        if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
          G_vmlCanvasManager.initElement(_this.canvas);
        }
        _this.ctx = _this.canvas.getContext('2d');
		if (_this.options.tronStyle == true) {
			_this.ctx.translate(((_this.options.size / 2) + 7 ), ((_this.options.size / 2) + 7 ));
		} else {
			_this.ctx.translate(_this.options.size / 2, _this.options.size / 2);
		}
        _this.$el.addClass('miniChart');
        if (_this.options.tronStyle == true) {
			_this.$el.css({			  
			  width: (_this.options.size +14),
			  height: (_this.options.size + 14),
			  //lineHeight: "" + _this.options.size + "px"
			});
		} else {
			_this.$el.css({			  
			  width: _this.options.size,
			  height: _this.options.size,
			  lineHeight: "" + _this.options.size + "px"
			});
		}
		
        _this.update(percent);
        return _this;
      };
      this.update = function(percent) {
        if (_this.options.animate === false) {
          return drawLine(percent);
        } else {
          return animateLine(_this.percentage, percent);
        }
      };
      renderScale = function() {
        var i, _i, _results;
        _this.ctx.fillStyle = _this.options.scaleColor;
        _this.ctx.lineWidth = 1;
        _results = [];
        for (i = _i = 0; _i <= 24; i = ++_i) {
          _results.push(addScaleLine(i));
        }
        return _results;
      };
      addScaleLine = function(i) {
        var offset;
        offset = i % 6 === 0 ? 0 : _this.options.size * 0.017;
        _this.ctx.save();
        _this.ctx.rotate(i * Math.PI / 12);
        _this.ctx.fillRect(_this.options.size / 2 - offset, 0, -_this.options.size * 0.05 + offset, 1);
        return _this.ctx.restore();
      };
      renderTrack = function() {
	  	    // Tron Styling
		function outerGlow() {
		  _this.ctx.beginPath();
		  _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
		  _this.ctx.lineWidth = 5;
		  _this.ctx.shadowBlur = 1;
		  _this.ctx.shadowColor = /*'rgba(40,140,190,1.5)'*/ '#a3a3a3';
		  _this.ctx.stroke();
		  _this.ctx.closePath();
		  var n = 2;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
			_this.ctx.shadowBlur = 5;
			_this.ctx.shadowColor = '#707070';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		function outerShadow() {
		  var n = 2;
		  for (var i = 0; i < n; i++) {
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.lineWidth = 3;
			_this.ctx.shadowBlur = 0;
			_this.ctx.shadowColor = /*'rgba(40,140,180,.5)' 'rgba(0,0,0,.6)'*/ 'rgba(50,50,50,.4)';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}		
		function innerGlow() {
		  var n = 5;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.strokeStyle = '#797979';
			_this.ctx.lineWidth = 2;
			_this.ctx.shadowBlur = 5;
			_this.ctx.shadowColor = '#919191';
			_this.ctx.closePath();
		  }
		}
		// Tron End
	  
        var offset;
        offset = _this.options.size / 2 - _this.options.lineWidth / 2;
        if (_this.options.scaleColor !== false) {
          offset -= _this.options.size * 0.08;
        }
        _this.ctx.beginPath();
        _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
        _this.ctx.strokeStyle = _this.options.trackColor;
		_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
		_this.ctx.closePath();

		if (_this.options.tronStyle == true) {
			outerGlow();
			outerShadow(); 
			innerGlow();
		}
		
        return _this.ctx.stroke();
      };
      renderBackground = function() {
        if (_this.options.scaleColor !== false) {
          renderScale();
        }
        if (_this.options.trackColor !== false) {
          return renderTrack();
        }
      };
	  
      drawLine = function(percent) {
	    // Tron Styling
		function outerGlow() {
		  _this.ctx.beginPath();
		  _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
		  _this.ctx.lineWidth = _this.options.lineWidth;
		  _this.ctx.shadowBlur = 3;
		  _this.ctx.shadowColor = /*'rgba(40,140,190,1.5)'*/ '#207fa3';
		  _this.ctx.stroke();
		  _this.ctx.closePath();
		  var n = 2;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.lineWidth = _this.options.lineWidth;
			_this.ctx.shadowBlur = 5;
			_this.ctx.shadowColor = '#2687b0';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		function outerShadow() {
		  var n = 2;
		  for (var i = 0; i < n; i++) {
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.lineWidth = 5;
			_this.ctx.shadowBlur = 0;
			_this.ctx.shadowColor = /*'rgba(40,140,180,.5)' 'rgba(0,0,0,.6)'*/ 'rgba(40,120,160,.7)';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}		
		function innerGlow() {
		  var n = 4;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.strokeStyle = '#64bfed';
			_this.ctx.lineWidth = 2;
			_this.ctx.shadowBlur = 2;
			_this.ctx.shadowColor = '#64bfed';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		// Tron End
        var offset;
        renderBackground();
        _this.ctx.strokeStyle = $.isFunction(_this.options.barColor) ? _this.options.barColor(percent) : _this.options.barColor;
        _this.ctx.lineCap = _this.options.lineCap;
        offset = _this.options.size / 2 - _this.options.lineWidth / 2;
        if (_this.options.scaleColor !== false) {
          offset -= _this.options.size * 0.08;
        }
        _this.ctx.save();
        _this.ctx.rotate(-Math.PI / 2);
        _this.ctx.beginPath();
        _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
		_this.ctx.lineWidth = _this.options.lineWidth;
		if (_this.options.tronStyle == true) {
			//var gradient=_this.ctx.createRadialGradient(0, 0, 400, 0, 0, 25, 0, 0, 10);
			//gradient.addColorStop(0, 'rgba(0,255,0,.5)');
			//gradient.addColorStop(1, 'rgba(255,0,0,.5)');
			_this.ctx.strokeStyle = '#4db4e4';
			_this.ctx.shadowBlur = 3;
			_this.ctx.shadowColor = '#207fa3';
			_this.ctx.stroke();
			_this.ctx.closePath();
			outerGlow();
			outerShadow();
			innerGlow();
        } else {
			_this.ctx.stroke();
			_this.ctx.closePath();
		}
		
		
        return _this.ctx.restore();
      };
      animateLine = function(from, to) {
        var currentStep, fps, steps;
        fps = 30;
        steps = fps * _this.options.animate / 1000;
        currentStep = 0;
        _this.options.onStart.call(_this);
        _this.percentage = to;
        if (_this.animation) {
          clearInterval(_this.animation);
          _this.animation = false;
        }
        return _this.animation = setInterval(function() {
          _this.ctx.clearRect(-_this.options.size / 2, -_this.options.size / 2, _this.options.size, _this.options.size);
          renderBackground.call(_this);
          drawLine.call(_this, [easeInOutQuad(currentStep, from, to - from, steps)]);
          currentStep++;
          if ((currentStep / steps) > 1) {
            clearInterval(_this.animation);
            _this.animation = false;
            return _this.options.onStop.call(_this);
          }
        }, 1000 / fps);
      };
      easeInOutQuad = function(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t + b;
        } else {
          return -c / 2 * ((--t) * (t - 2) - 1) + b;
        }
      };
      return this.init();
    };
    $.miniChart.defaultOptions = {
      barColor: '#36a9e1', 
      onStart: $.noop,
      onStop: $.noop,
	  trackColor: '#7a7a7a',
	  scaleColor: false,
	  lineCap: 'butt',
	  size: 300,
	  lineWidth: 18,
	  tronStyle: true,
	  animate: false,
	  trackOffset: 4
    };
    $.fn.miniChart = function(options) {
      return $.each(this, function(i, el) {
        var $el;
        $el = $(el);
        if (!$el.data('miniChart')) {
          return $el.data('miniChart', new $.miniChart(el, options));
        }
      });
    };
    return void 0;
  })(jQuery);

  
  //MiniScores End 

 // Medium Size Begin
  (function($) {
    $.mediumChart = function(el, options) {
      var addScaleLine, animateLine, drawLine, easeInOutQuad, renderBackground, renderScale, renderTrack,
        _this = this;
      this.el = el;
      this.$el = $(el);
      this.$el.data("mediumChart", this);
      this.init = function() {
        var percent;
        _this.options = $.extend({}, $.mediumChart.defaultOptions, options);
        /***percent = parseInt(_this.$el.data('percent'), 10);*/
		/**/ percent = parseInt(_this.$el.find('.score').text(), 10);
        _this.percentage = 0;
        if (_this.options.tronStyle == true) {
			_this.canvas = $("<canvas width='" + (_this.options.size + 14) + "' height='" + (_this.options.size + 14) + "'></canvas>").get(0);
		} else {
			_this.canvas = $("<canvas width='" + (_this.options.size) + "' height='" + (_this.options.size) + "'></canvas>").get(0);
		}
		_this.canvas = $("<canvas width='" + (_this.options.size + 14) + "' height='" + (_this.options.size + 14) + "'></canvas>").get(0);
        _this.$el.append(_this.canvas);
        if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
          G_vmlCanvasManager.initElement(_this.canvas);
        }
        _this.ctx = _this.canvas.getContext('2d');
		if (_this.options.tronStyle == true) {
			_this.ctx.translate(((_this.options.size / 2) + 7 ), ((_this.options.size / 2) + 7 ));
		} else {
			_this.ctx.translate(_this.options.size / 2, _this.options.size / 2);
		}
        _this.$el.addClass('mediumChart');
        if (_this.options.tronStyle == true) {
			_this.$el.css({			  
			  width: (_this.options.size +14),
			  height: (_this.options.size + 14),
			  //lineHeight: "" + _this.options.size + "px"
			});
		} else {
			_this.$el.css({			  
			  width: _this.options.size,
			  height: _this.options.size,
			  lineHeight: "" + _this.options.size + "px"
			});
		}
		
        _this.update(percent);
        return _this;
      };
      this.update = function(percent) {
        if (_this.options.animate === false) {
          return drawLine(percent);
        } else {
          return animateLine(_this.percentage, percent);
        }
      };
      renderScale = function() {
        var i, _i, _results;
        _this.ctx.fillStyle = _this.options.scaleColor;
        _this.ctx.lineWidth = 1;
        _results = [];
        for (i = _i = 0; _i <= 24; i = ++_i) {
          _results.push(addScaleLine(i));
        }
        return _results;
      };
      addScaleLine = function(i) {
        var offset;
        offset = i % 6 === 0 ? 0 : _this.options.size * 0.017;
        _this.ctx.save();
        _this.ctx.rotate(i * Math.PI / 12);
        _this.ctx.fillRect(_this.options.size / 2 - offset, 0, -_this.options.size * 0.05 + offset, 1);
        return _this.ctx.restore();
      };
      renderTrack = function() {
	  	    // Tron Styling
		function outerGlow() {
		  _this.ctx.beginPath();
		  _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
		  _this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
		  _this.ctx.shadowBlur = 2;
		  _this.ctx.shadowColor = /*'rgba(40,140,190,1.5)'*/ '#a3a3a3';
		  _this.ctx.stroke();
		  _this.ctx.closePath();
		  var n = 2;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
			_this.ctx.shadowBlur = 2;
			_this.ctx.shadowColor = '#707070';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		function outerShadow() {
		  var n = 2;
		  for (var i = 0; i < n; i++) {
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
			_this.ctx.shadowBlur = 3;
			_this.ctx.shadowColor = /*'rgba(40,140,180,.5)' 'rgba(0,0,0,.6)'*/ 'rgba(50,50,50,.7)';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}		
		function innerGlow() {
		  var n = 5;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
			_this.ctx.strokeStyle = '#919191';
			_this.ctx.lineWidth = 7;
			_this.ctx.shadowBlur = 5;
			_this.ctx.shadowColor = '#ababab';
			_this.ctx.closePath();
		  }
		}
		// Tron End
	  
        var offset;
        offset = _this.options.size / 2 - _this.options.lineWidth / 2;
        if (_this.options.scaleColor !== false) {
          offset -= _this.options.size * 0.08;
        }
        _this.ctx.beginPath();
        _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
        _this.ctx.strokeStyle = _this.options.trackColor;
		_this.ctx.lineWidth = ((_this.options.lineWidth) - (_this.options.trackOffset));
		_this.ctx.closePath();

		if (_this.options.tronStyle == true) {
			outerGlow();
			outerShadow(); 
			innerGlow();
		}
		
        return _this.ctx.stroke();
      };
      renderBackground = function() {
        if (_this.options.scaleColor !== false) {
          renderScale();
        }
        if (_this.options.trackColor !== false) {
          return renderTrack();
        }
      };
	  
      drawLine = function(percent) {
	    // Tron Styling
		function outerGlow() {
		  _this.ctx.beginPath();
		  _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
		  _this.ctx.lineWidth = _this.options.lineWidth;
		  _this.ctx.shadowBlur = 1;
		  _this.ctx.shadowColor = /*'rgba(40,140,190,1.5)'*/ '#207fa3';
		  _this.ctx.stroke();
		  _this.ctx.closePath();
		  var n = 2;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.lineWidth = _this.options.lineWidth;
			_this.ctx.shadowBlur = 3;
			_this.ctx.shadowColor = '#55bef2';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		function outerShadow() {
		  var n = 2;
		  for (var i = 0; i < n; i++) {
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.lineWidth = _this.options.lineWidth;
			_this.ctx.shadowBlur = .5;
			_this.ctx.shadowColor = /*'rgba(40,140,180,.5)' 'rgba(0,0,0,.6)'*/ 'rgba(18,49,64,.7)';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}		
		function innerGlow() {
		  var n = 10;
		  for (var i = 0; i < n; i++){
			_this.ctx.beginPath();
			_this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
			_this.ctx.strokeStyle = '#64bfed';
			_this.ctx.lineWidth = 2;
			_this.ctx.shadowBlur = 2;
			_this.ctx.shadowColor = '#64bfed';
			_this.ctx.stroke();
			_this.ctx.closePath();
		  }
		}
		// Tron End
        var offset;
        renderBackground();
        _this.ctx.strokeStyle = $.isFunction(_this.options.barColor) ? _this.options.barColor(percent) : _this.options.barColor;
        _this.ctx.lineCap = _this.options.lineCap;
        offset = _this.options.size / 2 - _this.options.lineWidth / 2;
        if (_this.options.scaleColor !== false) {
          offset -= _this.options.size * 0.08;
        }
        _this.ctx.save();
        _this.ctx.rotate(-Math.PI / 2);
        _this.ctx.beginPath();
        _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
		_this.ctx.lineWidth = _this.options.lineWidth;
		if (_this.options.tronStyle == true) {
			//var gradient=_this.ctx.createRadialGradient(0, 0, 400, 0, 0, 25, 0, 0, 10);
			//gradient.addColorStop(0, 'rgba(0,255,0,.5)');
			//gradient.addColorStop(1, 'rgba(255,0,0,.5)');
			_this.ctx.strokeStyle = '#4db4e4';
			_this.ctx.shadowBlur = 4;
			_this.ctx.shadowColor = '#207fa3';
			_this.ctx.stroke();
			_this.ctx.closePath();
			outerGlow();
			outerShadow();
			innerGlow();
        } else {
			_this.ctx.stroke();
			_this.ctx.closePath();
		}
		
		
        return _this.ctx.restore();
      };
      animateLine = function(from, to) {
        var currentStep, fps, steps;
        fps = 30;
        steps = fps * _this.options.animate / 1000;
        currentStep = 0;
        _this.options.onStart.call(_this);
        _this.percentage = to;
        if (_this.animation) {
          clearInterval(_this.animation);
          _this.animation = false;
        }
        return _this.animation = setInterval(function() {
          _this.ctx.clearRect(-_this.options.size / 2, -_this.options.size / 2, _this.options.size, _this.options.size);
          renderBackground.call(_this);
          drawLine.call(_this, [easeInOutQuad(currentStep, from, to - from, steps)]);
          currentStep++;
          if ((currentStep / steps) > 1) {
            clearInterval(_this.animation);
            _this.animation = false;
            return _this.options.onStop.call(_this);
          }
        }, 1000 / fps);
      };
      easeInOutQuad = function(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t + b;
        } else {
          return -c / 2 * ((--t) * (t - 2) - 1) + b;
        }
      };
      return this.init();
    };
    $.mediumChart.defaultOptions = {
      barColor: '#ef1e25', 
      onStart: $.noop,
      onStop: $.noop,
	  trackColor: '#7a7a7a',
	  scaleColor: false,
	  lineCap: 'butt',
	  size: 300,
	  lineWidth: 18,
	  tronStyle: true,
	  animate: false,
	  trackOffset: 4
    };
    $.fn.mediumChart = function(options) {
      return $.each(this, function(i, el) {
        var $el;
        $el = $(el);
        if (!$el.data('mediumChart')) {
          return $el.data('mediumChart', new $.mediumChart(el, options));
        }
      });
    };
    return void 0;
  })(jQuery);

  /* END of Large Charts */
  
  
}).call(this);
